syntax = "proto3";

import "google/protobuf/duration.proto";

package librarychecker;

service LibraryCheckerService {
    rpc Register (RegisterRequest) returns (RegisterResponse) {}
    rpc Login (LoginRequest) returns (LoginResponse) {}
    rpc UserInfo (UserInfoRequest) returns (UserInfoResponse) {}
    rpc UserList (UserListRequest) returns (UserListResponse) {}
    rpc ChangeUserInfo (ChangeUserInfoRequest) returns (ChangeUserInfoResponse) {}
    rpc ProblemInfo (ProblemInfoRequest) returns (ProblemInfoResponse) {}
    rpc ProblemList (ProblemListRequest) returns (ProblemListResponse) {}
    rpc ChangeProblemInfo (ChangeProblemInfoRequest) returns (ChangeProblemInfoResponse) {}
    rpc Submit (SubmitRequest) returns (SubmitResponse) {}
    rpc SubmissionInfo (SubmissionInfoRequest) returns (SubmissionInfoResponse) {}
    rpc SubmissionList (SubmissionListRequest) returns (SubmissionListResponse) {}
    rpc Rejudge (RejudgeRequest) returns (RejudgeResponse) {}
    rpc LangList (LangListRequest) returns (LangListResponse) {}
    rpc Ranking (RankingRequest) returns (RankingResponse) {} // used by another product

    // --- Judge ---
    rpc PopJudgeTask (PopJudgeTaskRequest) returns (PopJudgeTaskResponse) {}
    rpc SyncJudgeTaskStatus (SyncJudgeTaskStatusRequest) returns (SyncJudgeTaskStatusResponse) {}
    rpc FinishJudgeTask (FinishJudgeTaskRequest) returns (FinishJudgeTaskResponse) {}
}

// --- Register, Login ---

message RegisterRequest {
    string name = 1; // "newuser"
    string password = 2; // "password"    
}
message RegisterResponse {
    string token = 1; // JWT Token
}

message LoginRequest {
    string name = 1; // "admin"
    string password = 2; // "password"    
}
message LoginResponse {
    string token = 1; // JWT Token
}

message User {
    string name = 1;
    bool is_admin = 2;
}

message UserInfoRequest {
}
message UserInfoResponse {
    bool is_admin = 1 [deprecated=true];
    User user = 2;
}

message UserListRequest {
}
message UserListResponse {
    repeated User users = 2;
}

message ChangeUserInfoRequest {
    User user = 1;
}
message ChangeUserInfoResponse {
}

// --- Problem ---

message Problem {
    string name = 1; // "aplusb"
    string title = 2; // "A + B"
}

message ProblemListRequest {    
}
message ProblemListResponse {
    repeated Problem problems = 1;
}

message ProblemInfoRequest {
    string name = 1; // "aplusb"
}
message ProblemInfoResponse {
    string title = 1; // "A + B"
    string statement = 2;
    double time_limit = 3; // 2.0 = 2 seconds
    string case_version = 4; // hash of testcases
}

message ChangeProblemInfoRequest {
    string name = 1; // "aplusb"
    string title = 2;
    string statement = 3;
    double time_limit = 4;
    string case_version = 5;
}
message ChangeProblemInfoResponse {
}

// --- Submission ---

message SubmitRequest {
    string problem = 1; // "aplusb"
    string source = 2; // "int main() ..."
    string lang = 3; // "cpp"
}
message SubmitResponse {
    int32 id = 1; // submission id
}

message SubmissionOverview {
    int32 id = 1; // submission id
    string problem_name = 2; // "aplusb"
    string problem_title = 3; // "A + B"
    string user_name = 4; // "admin"
    string lang = 5; // "cpp"
    bool is_latest = 6;
    string status = 7; // "AC"
    bool hacked = 10;
    double time = 8; // 2.0 = 2 seconds
    int64 memory = 9; // x bytes
}
message SubmissionCaseResult {
    string case = 1; // "example_00.in"
    string status = 2; // "AC"
    double time = 3; // 2.0( = 2 seconds)
    int64 memory = 4; // x bytes
}

message SubmissionInfoRequest {
    int32 id = 1; // submission id
}
message SubmissionInfoResponse {
    SubmissionOverview overview = 1;
    repeated SubmissionCaseResult case_results = 2;
    string source = 3; // "source"
    bool can_rejudge = 4;
}

message SubmissionListRequest {
    uint32 skip = 1; // fetch [skip, skip + limit)-th submissions
    uint32 limit = 2; // # of submissions (max 1000)
    string problem = 3; // "aplusb"(filter)
    string status = 4; // "AC"(filter)
    bool hacked = 7; // (filter)
    string user = 5; // "admin"(filter)
    string lang = 8; // "cpp"(filter)
    string order = 6; // sort order (default: "-id", "time")
}
message SubmissionListResponse {
    repeated SubmissionOverview submissions = 1;
    int32 count = 2; // # of submissions(skip/limit don't effect this)
}

message RejudgeRequest {
    int32 id = 1; // submission id
}
message RejudgeResponse {
}

// --- Lang ---

message Lang {
    string id = 1; // "cpp"
    string name = 2; // "C++(default, C++17)"
    string version = 3; // "ubuntu18.04 apt"
}

message LangListRequest {
}
message LangListResponse {
    repeated Lang langs = 1;
}

// --- Ranking ---

message UserStatistics {
    string name = 1; // "admin"
    int32 count = 2; // 12 (AC)
}
message RankingRequest {    
}
message RankingResponse {
    repeated UserStatistics statistics = 1;
}

// --- Judge ---

message PopJudgeTaskRequest {
    string judge_name = 1;
    google.protobuf.Duration expected_time = 2;
}

message PopJudgeTaskResponse {
    int32 submission_id = 1; // submission id
}

message SyncJudgeTaskStatusRequest {
    string judge_name = 1;
    int32 submission_id = 2;
    string status = 3;
    double time = 4; // 2.0 = 2 seconds
    int64 memory = 5; // x bytes
    repeated SubmissionCaseResult case_results = 6;
    google.protobuf.Duration expected_time = 7;
}
message SyncJudgeTaskStatusResponse {
}

message FinishJudgeTaskRequest {
    string judge_name = 1;
    int32 submission_id = 2;
    string status = 3 [deprecated=true];
    double time = 4 [deprecated=true]; // 2.0 = 2 seconds
    int64 memory = 5 [deprecated=true]; // x bytes
    string case_version = 6;
}
message FinishJudgeTaskResponse {
}
